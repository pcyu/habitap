"use strict";!function(n){var i={baseUrl:"http://localhost:3007",init:function(){}};(0,window.jQuery)(window).on("load",function(){i.init()})}(),function(n){var i={box:function(){n("body").append('\n        <div class="viewport">\n          <span id="t-width"></span> x <span id="t-height"></span>\n        </div>\n      ')},calculateDimensions:function(){var i=window.innerWidth,t=window.innerHeight;n("#t-width").html(i),n("#t-height").html(t)},init:function(){i.box(),i.sizer()},sizer:function(){i.calculateDimensions(),i.toggleBox()},toggleBox:function(){n(".viewport").click(function(){n(this).toggleClass("inactive")})}};n(window).on("load",function(){i.init()}),n(window).on("resize",function(){i.sizer()})}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
