"use strict";function getRecentUserMessage(i){setTimeout(function(){i(MOCK_STATUS_UPDATES)},1)}function displayMessage(i){for(index in i.user)$("body").append("<p>"+i.user[index].text+"</p>")}function getAndDisplayUserMessages(){getRecentUserMessage(displayMessage)}!function(i){var n={init:function(){n.isWorking()},isWorking:function(){console.log("The JS file 'main.js' is properly linked to 'index.html'.")}};(0,window.jQuery)(window).on("load",function(){n.init()})}();var MOCK_STATUS_UPDATES={user:[{id:"1111111",text:"Can't believe how much fun I'm having.",publishedAt:1470016976609},{id:"2222222",text:"Have FOMO? Well you SHOULD!",publishedAt:1470012976609},{id:"333333",text:"They're giving out immortality and free $$$ where I am.",publishedAt:1470011976609},{id:"4444444",text:"humble brag humble brag humble brag",publishedAt:1470009976609}]};$(function(){getAndDisplayUserMessages()}),function(i){var n={box:function(){i("body").append('\n        <div class="viewport">\n          <span id="t-width"></span> x <span id="t-height"></span>\n        </div>\n      ')},calculateDimensions:function(){var n=window.innerWidth,e=window.innerHeight;i("#t-width").html(n),i("#t-height").html(e)},init:function(){n.box(),n.sizer()},sizer:function(){n.calculateDimensions(),n.toggleBox()},toggleBox:function(){i(".viewport").click(function(){i(this).toggleClass("inactive")})}};i(window).on("load",function(){n.init()}),i(window).on("resize",function(){n.sizer()})}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJtb2NrLmpzIiwic2l6ZXIuanMiXSwibmFtZXMiOlsiZ2V0UmVjZW50VXNlck1lc3NhZ2UiLCJjYWxsYmFja0ZuIiwic2V0VGltZW91dCIsIk1PQ0tfU1RBVFVTX1VQREFURVMiLCJkaXNwbGF5TWVzc2FnZSIsImRhdGEiLCJpbmRleCIsInVzZXIiLCIkIiwiYXBwZW5kIiwidGV4dCIsImdldEFuZERpc3BsYXlVc2VyTWVzc2FnZXMiLCJhcHAiLCJpbml0IiwiaXNXb3JraW5nIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImpRdWVyeSIsIm9uIiwiaWQiLCJwdWJsaXNoZWRBdCIsImJveCIsImNhbGN1bGF0ZURpbWVuc2lvbnMiLCJ3IiwiaW5uZXJXaWR0aCIsImgiLCJpbm5lckhlaWdodCIsImh0bWwiLCJzaXplciIsInRvZ2dsZUJveCIsImNsaWNrIiwidGhpcyIsInRvZ2dsZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQSxhQzhCQSxTQUFBQSxxQkFBQUMsR0FHQUMsV0FBQSxXQUNBRCxFQUFBRSxzQkFDQSxHQUtBLFNBQUFDLGVBQUFDLEdBQ0EsSUFBQUMsU0FBQUQsRUFBQUUsS0FDQUMsRUFBQSxRQUFBQyxPQUFBLE1BQUFKLEVBQUFFLEtBQUFELE9BQUFJLEtBQUEsUUFNQSxTQUFBQyw0QkFDQVgscUJBQUFJLGlCRC9DQSxTQUFBSSxHQUVBLElBQUFJLEdBRUFDLEtBQUEsV0FDQUQsRUFBQUUsYUFHQUEsVUFBQSxXQUNBQyxRQUFBQyxJQUFBLGdFQUtBUixFQUdBUyxPQUFBQyxRQUhBRCxRQUFBRSxHQUFBLE9BQUEsV0FDQVAsRUFBQUMsU0FmQSxHQ0VBLElBQUFWLHFCQUNBSSxPQUNBYSxHQUFBLFVBQ0FWLEtBQUEseUNBQ0FXLFlBQUEsZ0JBRUFELEdBQUEsVUFDQVYsS0FBQSw4QkFDQVcsWUFBQSxnQkFFQUQsR0FBQSxTQUNBVixLQUFBLDBEQUNBVyxZQUFBLGdCQUVBRCxHQUFBLFVBQ0FWLEtBQUEsc0NBQ0FXLFlBQUEsaUJBaUNBYixFQUFBLFdBQ0FHLDhCQ3BEQSxTQUFBSCxHQUVBLElBQUFJLEdBQ0FVLElBQUEsV0FDQWQsRUFBQSxRQUFBQyxPQUFBLGlJQUVBYyxvQkFBQSxXQUNBLElBQUFDLEVBQUFQLE9BQUFRLFdBQ0FDLEVBQUFULE9BQUFVLFlBQ0FuQixFQUFBLFlBQUFvQixLQUFBSixHQUNBaEIsRUFBQSxhQUFBb0IsS0FBQUYsSUFFQWIsS0FBQSxXQUNBRCxFQUFBVSxNQUNBVixFQUFBaUIsU0FFQUEsTUFBQSxXQUNBakIsRUFBQVcsc0JBQ0FYLEVBQUFrQixhQUVBQSxVQUFBLFdBQ0F0QixFQUFBLGFBQUF1QixNQUFBLFdBQ0F2QixFQUFBd0IsTUFBQUMsWUFBQSxnQkFLQXpCLEVBQUFTLFFBQUFFLEdBQUEsT0FBQSxXQUNBUCxFQUFBQyxTQUdBTCxFQUFBUyxRQUFBRSxHQUFBLFNBQUEsV0FDQVAsRUFBQWlCLFVBaENBLENBa0NBWixPQUFBQyIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgYXBwID0ge1xuXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGFwcC5pc1dvcmtpbmcoKTtcbiAgICB9LFxuXG4gICAgaXNXb3JraW5nOiBmdW5jdGlvbiBpc1dvcmtpbmcoKSB7XG4gICAgICBjb25zb2xlLmxvZygnVGhlIEpTIGZpbGUgXFwnbWFpbi5qc1xcJyBpcyBwcm9wZXJseSBsaW5rZWQgdG8gXFwnaW5kZXguaHRtbFxcJy4nKTtcbiAgICB9XG5cbiAgfTtcblxuICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgYXBwLmluaXQoKTtcbiAgfSk7XG59KSh3aW5kb3cualF1ZXJ5KTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gdGhpcyBpcyBtb2NrIGRhdGEsIGJ1dCB3aGVuIHdlIGNyZWF0ZSBvdXIgQVBJXG4vLyB3ZSdsbCBoYXZlIGl0IHJldHVybiBkYXRhIHRoYXQgbG9va3MgbGlrZSB0aGlzXG52YXIgTU9DS19TVEFUVVNfVVBEQVRFUyA9IHtcbiAgICBcInVzZXJcIjogW3tcbiAgICAgICAgXCJpZFwiOiBcIjExMTExMTFcIixcbiAgICAgICAgXCJ0ZXh0XCI6IFwiQ2FuJ3QgYmVsaWV2ZSBob3cgbXVjaCBmdW4gSSdtIGhhdmluZy5cIixcbiAgICAgICAgXCJwdWJsaXNoZWRBdFwiOiAxNDcwMDE2OTc2NjA5XG4gICAgfSwge1xuICAgICAgICBcImlkXCI6IFwiMjIyMjIyMlwiLFxuICAgICAgICBcInRleHRcIjogXCJIYXZlIEZPTU8/IFdlbGwgeW91IFNIT1VMRCFcIixcbiAgICAgICAgXCJwdWJsaXNoZWRBdFwiOiAxNDcwMDEyOTc2NjA5XG4gICAgfSwge1xuICAgICAgICBcImlkXCI6IFwiMzMzMzMzXCIsXG4gICAgICAgIFwidGV4dFwiOiBcIlRoZXkncmUgZ2l2aW5nIG91dCBpbW1vcnRhbGl0eSBhbmQgZnJlZSAkJCQgd2hlcmUgSSBhbS5cIixcbiAgICAgICAgXCJwdWJsaXNoZWRBdFwiOiAxNDcwMDExOTc2NjA5XG4gICAgfSwge1xuICAgICAgICBcImlkXCI6IFwiNDQ0NDQ0NFwiLFxuICAgICAgICBcInRleHRcIjogXCJodW1ibGUgYnJhZyBodW1ibGUgYnJhZyBodW1ibGUgYnJhZ1wiLFxuICAgICAgICBcInB1Ymxpc2hlZEF0XCI6IDE0NzAwMDk5NzY2MDlcbiAgICB9XVxufTtcblxuLy8gdGhpcyBmdW5jdGlvbidzIG5hbWUgYW5kIGFyZ3VtZW50IGNhbiBzdGF5IHRoZVxuLy8gc2FtZSBhZnRlciB3ZSBoYXZlIGEgbGl2ZSBBUEksIGJ1dCBpdHMgaW50ZXJuYWxcbi8vIGltcGxlbWVudGF0aW9uIHdpbGwgY2hhbmdlLiBJbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIHRpbWVvdXQgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1vY2sgZGF0YSwgaXQgd2lsbFxuLy8gdXNlIGpRdWVyeSdzIEFKQVggZnVuY3Rpb25hbGl0eSB0byBtYWtlIGEgY2FsbFxuLy8gdG8gdGhlIHNlcnZlciBhbmQgdGhlbiBydW4gdGhlIGNhbGxiYWNrRm5cbmZ1bmN0aW9uIGdldFJlY2VudFVzZXJNZXNzYWdlKGNhbGxiYWNrRm4pIHtcbiAgICAvLyB3ZSB1c2UgYSBgc2V0VGltZW91dGAgdG8gbWFrZSB0aGlzIGFzeW5jaHJvbm91c1xuICAgIC8vIGFzIGl0IHdvdWxkIGJlIHdpdGggYSByZWFsIEFKQVggY2FsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2tGbihNT0NLX1NUQVRVU19VUERBVEVTKTtcbiAgICB9LCAxKTtcbn1cblxuLy8gdGhpcyBmdW5jdGlvbiBzdGF5cyB0aGUgc2FtZSB3aGVuIHdlIGNvbm5lY3Rcbi8vIHRvIHJlYWwgQVBJIGxhdGVyXG5mdW5jdGlvbiBkaXNwbGF5TWVzc2FnZShkYXRhKSB7XG4gICAgZm9yIChpbmRleCBpbiBkYXRhLnVzZXIpIHtcbiAgICAgICAgJCgnYm9keScpLmFwcGVuZCgnPHA+JyArIGRhdGEudXNlcltpbmRleF0udGV4dCArICc8L3A+Jyk7XG4gICAgfVxufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIGNhbiBzdGF5IHRoZSBzYW1lIGV2ZW4gd2hlbiB3ZVxuLy8gYXJlIGNvbm5lY3RpbmcgdG8gcmVhbCBBUElcbmZ1bmN0aW9uIGdldEFuZERpc3BsYXlVc2VyTWVzc2FnZXMoKSB7XG4gICAgZ2V0UmVjZW50VXNlck1lc3NhZ2UoZGlzcGxheU1lc3NhZ2UpO1xufVxuXG4vLyAgb24gcGFnZSBsb2FkIGRvIHRoaXNcbiQoZnVuY3Rpb24gKCkge1xuICAgIGdldEFuZERpc3BsYXlVc2VyTWVzc2FnZXMoKTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgYXBwID0ge1xuICAgIGJveDogZnVuY3Rpb24gYm94KCkge1xuICAgICAgJCgnYm9keScpLmFwcGVuZChcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmlld3BvcnRcXFwiPlxcbiAgICAgICAgICA8c3BhbiBpZD1cXFwidC13aWR0aFxcXCI+PC9zcGFuPiB4IDxzcGFuIGlkPVxcXCJ0LWhlaWdodFxcXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgXCIpO1xuICAgIH0sXG4gICAgY2FsY3VsYXRlRGltZW5zaW9uczogZnVuY3Rpb24gY2FsY3VsYXRlRGltZW5zaW9ucygpIHtcbiAgICAgIHZhciB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICQoXCIjdC13aWR0aFwiKS5odG1sKHcpO1xuICAgICAgJChcIiN0LWhlaWdodFwiKS5odG1sKGgpO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGFwcC5ib3goKTtcbiAgICAgIGFwcC5zaXplcigpO1xuICAgIH0sXG4gICAgc2l6ZXI6IGZ1bmN0aW9uIHNpemVyKCkge1xuICAgICAgYXBwLmNhbGN1bGF0ZURpbWVuc2lvbnMoKTtcbiAgICAgIGFwcC50b2dnbGVCb3goKTtcbiAgICB9LFxuICAgIHRvZ2dsZUJveDogZnVuY3Rpb24gdG9nZ2xlQm94KCkge1xuICAgICAgJCgnLnZpZXdwb3J0JykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBhcHAuaW5pdCgpOyAvL2MwMjhcbiAgfSk7XG5cbiAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgYXBwLnNpemVyKCk7IC8vYzAyOFxuICB9KTtcbn0pKHdpbmRvdy5qUXVlcnkpOyJdfQ==
