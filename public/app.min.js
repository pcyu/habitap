<<<<<<< HEAD
"use strict";function getRecentStatusUpdates(i){setTimeout(function(){i(MOCK_STATUS_UPDATES)},1)}function displayStatusUpdates(i){for(index in i.statusUpdates)$("body").append("<p>"+i.statusUpdates[index].text+"</p>")}function getAndDisplayStatusUpdates(){getRecentStatusUpdates(displayStatusUpdates)}!function(i){var t={init:function(){t.isWorking()},isWorking:function(){console.log("The JS file 'main.js' is properly linked to 'index.html'.")}};(0,window.jQuery)(window).on("load",function(){t.init()})}();var MOCK_STATUS_UPDATES={statusUpdates:[{id:"1111111",text:"Can't believe how much fun I'm having.",friendId:"aaaaaa",friendName:"John Doe",publishedAt:1470016976609},{id:"2222222",text:"Have FOMO? Well you SHOULD!",friendId:"bbbbbbb",friendName:"Jane Doe",publishedAt:1470012976609},{id:"333333",text:"They're giving out immortality and free $$$ where I am.",friendId:"cccc",friendName:"Jim Doe",publishedAt:1470011976609},{id:"4444444",text:"humble brag humble brag humble brag",friendId:"ddddd",friendName:"Jackie Doe",publishedAt:1470009976609}]};$(function(){getAndDisplayStatusUpdates()}),function(i){var t={box:function(){i("body").append('\n        <div class="viewport">\n          <span id="t-width"></span> x <span id="t-height"></span>\n        </div>\n      ')},calculateDimensions:function(){var t=window.innerWidth,n=window.innerHeight;i("#t-width").html(t),i("#t-height").html(n)},init:function(){t.box(),t.sizer()},sizer:function(){t.calculateDimensions(),t.toggleBox()},toggleBox:function(){i(".viewport").click(function(){i(this).toggleClass("inactive")})}};i(window).on("load",function(){t.init()}),i(window).on("resize",function(){t.sizer()})}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJtb2NrLmpzIiwic2l6ZXIuanMiXSwibmFtZXMiOlsiZ2V0UmVjZW50U3RhdHVzVXBkYXRlcyIsImNhbGxiYWNrRm4iLCJzZXRUaW1lb3V0IiwiTU9DS19TVEFUVVNfVVBEQVRFUyIsImRpc3BsYXlTdGF0dXNVcGRhdGVzIiwiZGF0YSIsImluZGV4Iiwic3RhdHVzVXBkYXRlcyIsIiQiLCJhcHBlbmQiLCJ0ZXh0IiwiZ2V0QW5kRGlzcGxheVN0YXR1c1VwZGF0ZXMiLCJhcHAiLCJpbml0IiwiaXNXb3JraW5nIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImpRdWVyeSIsIm9uIiwiaWQiLCJmcmllbmRJZCIsImZyaWVuZE5hbWUiLCJwdWJsaXNoZWRBdCIsImJveCIsImNhbGN1bGF0ZURpbWVuc2lvbnMiLCJ3IiwiaW5uZXJXaWR0aCIsImgiLCJpbm5lckhlaWdodCIsImh0bWwiLCJzaXplciIsInRvZ2dsZUJveCIsImNsaWNrIiwidGhpcyIsInRvZ2dsZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQSxhQ3NDQSxTQUFBQSx1QkFBQUMsR0FHQUMsV0FBQSxXQUNBRCxFQUFBRSxzQkFDQSxHQUtBLFNBQUFDLHFCQUFBQyxHQUNBLElBQUFDLFNBQUFELEVBQUFFLGNBQ0FDLEVBQUEsUUFBQUMsT0FBQSxNQUFBSixFQUFBRSxjQUFBRCxPQUFBSSxLQUFBLFFBTUEsU0FBQUMsNkJBQ0FYLHVCQUFBSSx1QkR2REEsU0FBQUksR0FFQSxJQUFBSSxHQUVBQyxLQUFBLFdBQ0FELEVBQUFFLGFBR0FBLFVBQUEsV0FDQUMsUUFBQUMsSUFBQSxnRUFLQVIsRUFHQVMsT0FBQUMsUUFIQUQsUUFBQUUsR0FBQSxPQUFBLFdBQ0FQLEVBQUFDLFNBZkEsR0NFQSxJQUFBVixxQkFDQUksZ0JBQ0FhLEdBQUEsVUFDQVYsS0FBQSx5Q0FDQVcsU0FBQSxTQUNBQyxXQUFBLFdBQ0FDLFlBQUEsZ0JBRUFILEdBQUEsVUFDQVYsS0FBQSw4QkFDQVcsU0FBQSxVQUNBQyxXQUFBLFdBQ0FDLFlBQUEsZ0JBRUFILEdBQUEsU0FDQVYsS0FBQSwwREFDQVcsU0FBQSxPQUNBQyxXQUFBLFVBQ0FDLFlBQUEsZ0JBRUFILEdBQUEsVUFDQVYsS0FBQSxzQ0FDQVcsU0FBQSxRQUNBQyxXQUFBLGFBQ0FDLFlBQUEsaUJBaUNBZixFQUFBLFdBQ0FHLCtCQzVEQSxTQUFBSCxHQUVBLElBQUFJLEdBQ0FZLElBQUEsV0FDQWhCLEVBQUEsUUFBQUMsT0FBQSxpSUFFQWdCLG9CQUFBLFdBQ0EsSUFBQUMsRUFBQVQsT0FBQVUsV0FDQUMsRUFBQVgsT0FBQVksWUFDQXJCLEVBQUEsWUFBQXNCLEtBQUFKLEdBQ0FsQixFQUFBLGFBQUFzQixLQUFBRixJQUVBZixLQUFBLFdBQ0FELEVBQUFZLE1BQ0FaLEVBQUFtQixTQUVBQSxNQUFBLFdBQ0FuQixFQUFBYSxzQkFDQWIsRUFBQW9CLGFBRUFBLFVBQUEsV0FDQXhCLEVBQUEsYUFBQXlCLE1BQUEsV0FDQXpCLEVBQUEwQixNQUFBQyxZQUFBLGdCQUtBM0IsRUFBQVMsUUFBQUUsR0FBQSxPQUFBLFdBQ0FQLEVBQUFDLFNBR0FMLEVBQUFTLFFBQUFFLEdBQUEsU0FBQSxXQUNBUCxFQUFBbUIsVUFoQ0EsQ0FrQ0FkLE9BQUFDIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoJCkge1xuXG4gIHZhciBhcHAgPSB7XG5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgYXBwLmlzV29ya2luZygpO1xuICAgIH0sXG5cbiAgICBpc1dvcmtpbmc6IGZ1bmN0aW9uIGlzV29ya2luZygpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdUaGUgSlMgZmlsZSBcXCdtYWluLmpzXFwnIGlzIHByb3Blcmx5IGxpbmtlZCB0byBcXCdpbmRleC5odG1sXFwnLicpO1xuICAgIH1cblxuICB9O1xuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBhcHAuaW5pdCgpO1xuICB9KTtcbn0pKHdpbmRvdy5qUXVlcnkpOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyB0aGlzIGlzIG1vY2sgZGF0YSwgYnV0IHdoZW4gd2UgY3JlYXRlIG91ciBBUElcbi8vIHdlJ2xsIGhhdmUgaXQgcmV0dXJuIGRhdGEgdGhhdCBsb29rcyBsaWtlIHRoaXNcbnZhciBNT0NLX1NUQVRVU19VUERBVEVTID0ge1xuICAgIFwic3RhdHVzVXBkYXRlc1wiOiBbe1xuICAgICAgICBcImlkXCI6IFwiMTExMTExMVwiLFxuICAgICAgICBcInRleHRcIjogXCJDYW4ndCBiZWxpZXZlIGhvdyBtdWNoIGZ1biBJJ20gaGF2aW5nLlwiLFxuICAgICAgICBcImZyaWVuZElkXCI6IFwiYWFhYWFhXCIsXG4gICAgICAgIFwiZnJpZW5kTmFtZVwiOiBcIkpvaG4gRG9lXCIsXG4gICAgICAgIFwicHVibGlzaGVkQXRcIjogMTQ3MDAxNjk3NjYwOVxuICAgIH0sIHtcbiAgICAgICAgXCJpZFwiOiBcIjIyMjIyMjJcIixcbiAgICAgICAgXCJ0ZXh0XCI6IFwiSGF2ZSBGT01PPyBXZWxsIHlvdSBTSE9VTEQhXCIsXG4gICAgICAgIFwiZnJpZW5kSWRcIjogXCJiYmJiYmJiXCIsXG4gICAgICAgIFwiZnJpZW5kTmFtZVwiOiBcIkphbmUgRG9lXCIsXG4gICAgICAgIFwicHVibGlzaGVkQXRcIjogMTQ3MDAxMjk3NjYwOVxuICAgIH0sIHtcbiAgICAgICAgXCJpZFwiOiBcIjMzMzMzM1wiLFxuICAgICAgICBcInRleHRcIjogXCJUaGV5J3JlIGdpdmluZyBvdXQgaW1tb3J0YWxpdHkgYW5kIGZyZWUgJCQkIHdoZXJlIEkgYW0uXCIsXG4gICAgICAgIFwiZnJpZW5kSWRcIjogXCJjY2NjXCIsXG4gICAgICAgIFwiZnJpZW5kTmFtZVwiOiBcIkppbSBEb2VcIixcbiAgICAgICAgXCJwdWJsaXNoZWRBdFwiOiAxNDcwMDExOTc2NjA5XG4gICAgfSwge1xuICAgICAgICBcImlkXCI6IFwiNDQ0NDQ0NFwiLFxuICAgICAgICBcInRleHRcIjogXCJodW1ibGUgYnJhZyBodW1ibGUgYnJhZyBodW1ibGUgYnJhZ1wiLFxuICAgICAgICBcImZyaWVuZElkXCI6IFwiZGRkZGRcIixcbiAgICAgICAgXCJmcmllbmROYW1lXCI6IFwiSmFja2llIERvZVwiLFxuICAgICAgICBcInB1Ymxpc2hlZEF0XCI6IDE0NzAwMDk5NzY2MDlcbiAgICB9XVxufTtcblxuLy8gdGhpcyBmdW5jdGlvbidzIG5hbWUgYW5kIGFyZ3VtZW50IGNhbiBzdGF5IHRoZVxuLy8gc2FtZSBhZnRlciB3ZSBoYXZlIGEgbGl2ZSBBUEksIGJ1dCBpdHMgaW50ZXJuYWxcbi8vIGltcGxlbWVudGF0aW9uIHdpbGwgY2hhbmdlLiBJbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIHRpbWVvdXQgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1vY2sgZGF0YSwgaXQgd2lsbFxuLy8gdXNlIGpRdWVyeSdzIEFKQVggZnVuY3Rpb25hbGl0eSB0byBtYWtlIGEgY2FsbFxuLy8gdG8gdGhlIHNlcnZlciBhbmQgdGhlbiBydW4gdGhlIGNhbGxiYWNrRm5cbmZ1bmN0aW9uIGdldFJlY2VudFN0YXR1c1VwZGF0ZXMoY2FsbGJhY2tGbikge1xuICAgIC8vIHdlIHVzZSBhIGBzZXRUaW1lb3V0YCB0byBtYWtlIHRoaXMgYXN5bmNocm9ub3VzXG4gICAgLy8gYXMgaXQgd291bGQgYmUgd2l0aCBhIHJlYWwgQUpBWCBjYWxsLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFja0ZuKE1PQ0tfU1RBVFVTX1VQREFURVMpO1xuICAgIH0sIDEpO1xufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIHN0YXlzIHRoZSBzYW1lIHdoZW4gd2UgY29ubmVjdFxuLy8gdG8gcmVhbCBBUEkgbGF0ZXJcbmZ1bmN0aW9uIGRpc3BsYXlTdGF0dXNVcGRhdGVzKGRhdGEpIHtcbiAgICBmb3IgKGluZGV4IGluIGRhdGEuc3RhdHVzVXBkYXRlcykge1xuICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8cD4nICsgZGF0YS5zdGF0dXNVcGRhdGVzW2luZGV4XS50ZXh0ICsgJzwvcD4nKTtcbiAgICB9XG59XG5cbi8vIHRoaXMgZnVuY3Rpb24gY2FuIHN0YXkgdGhlIHNhbWUgZXZlbiB3aGVuIHdlXG4vLyBhcmUgY29ubmVjdGluZyB0byByZWFsIEFQSVxuZnVuY3Rpb24gZ2V0QW5kRGlzcGxheVN0YXR1c1VwZGF0ZXMoKSB7XG4gICAgZ2V0UmVjZW50U3RhdHVzVXBkYXRlcyhkaXNwbGF5U3RhdHVzVXBkYXRlcyk7XG59XG5cbi8vICBvbiBwYWdlIGxvYWQgZG8gdGhpc1xuJChmdW5jdGlvbiAoKSB7XG4gICAgZ2V0QW5kRGlzcGxheVN0YXR1c1VwZGF0ZXMoKTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgYXBwID0ge1xuICAgIGJveDogZnVuY3Rpb24gYm94KCkge1xuICAgICAgJCgnYm9keScpLmFwcGVuZChcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmlld3BvcnRcXFwiPlxcbiAgICAgICAgICA8c3BhbiBpZD1cXFwidC13aWR0aFxcXCI+PC9zcGFuPiB4IDxzcGFuIGlkPVxcXCJ0LWhlaWdodFxcXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgXCIpO1xuICAgIH0sXG4gICAgY2FsY3VsYXRlRGltZW5zaW9uczogZnVuY3Rpb24gY2FsY3VsYXRlRGltZW5zaW9ucygpIHtcbiAgICAgIHZhciB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICQoXCIjdC13aWR0aFwiKS5odG1sKHcpO1xuICAgICAgJChcIiN0LWhlaWdodFwiKS5odG1sKGgpO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGFwcC5ib3goKTtcbiAgICAgIGFwcC5zaXplcigpO1xuICAgIH0sXG4gICAgc2l6ZXI6IGZ1bmN0aW9uIHNpemVyKCkge1xuICAgICAgYXBwLmNhbGN1bGF0ZURpbWVuc2lvbnMoKTtcbiAgICAgIGFwcC50b2dnbGVCb3goKTtcbiAgICB9LFxuICAgIHRvZ2dsZUJveDogZnVuY3Rpb24gdG9nZ2xlQm94KCkge1xuICAgICAgJCgnLnZpZXdwb3J0JykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBhcHAuaW5pdCgpOyAvL2MwMjhcbiAgfSk7XG5cbiAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgYXBwLnNpemVyKCk7IC8vYzAyOFxuICB9KTtcbn0pKHdpbmRvdy5qUXVlcnkpOyJdfQ==
=======
"use strict";function getRecentUserMessage(i){setTimeout(function(){i(MOCK_STATUS_UPDATES)},1)}function displayMessage(i){for(var n in i.user)$("body").append("<p>"+i.user[n].text+"</p>")}function getAndDisplayUserMessages(){getRecentUserMessage(displayMessage)}!function(i){var n={init:function(){n.isWorking()},isWorking:function(){console.log("The JS file 'main.js' is properly linked to 'index.html'.")}};(0,window.jQuery)(window).on("load",function(){n.init()})}();var MOCK_STATUS_UPDATES={user:[{id:"1111111",text:"Can't believe how much fun I'm having.",publishedAt:1470016976609},{id:"2222222",text:"Have FOMO? Well you SHOULD!",publishedAt:1470012976609},{id:"333333",text:"They're giving out immortality and free $$$ where I am.",publishedAt:1470011976609},{id:"4444444",text:"humble brag humble brag humble brag",publishedAt:1470009976609}]};$(function(){getAndDisplayUserMessages()}),function(i){var n={box:function(){i("body").append('\n        <div class="viewport">\n          <span id="t-width"></span> x <span id="t-height"></span>\n        </div>\n      ')},calculateDimensions:function(){var n=window.innerWidth,e=window.innerHeight;i("#t-width").html(n),i("#t-height").html(e)},init:function(){n.box(),n.sizer()},sizer:function(){n.calculateDimensions(),n.toggleBox()},toggleBox:function(){i(".viewport").click(function(){i(this).toggleClass("inactive")})}};i(window).on("load",function(){n.init()}),i(window).on("resize",function(){n.sizer()})}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJtb2NrLmpzIiwic2l6ZXIuanMiXSwibmFtZXMiOlsiZ2V0UmVjZW50VXNlck1lc3NhZ2UiLCJjYWxsYmFja0ZuIiwic2V0VGltZW91dCIsIk1PQ0tfU1RBVFVTX1VQREFURVMiLCJkaXNwbGF5TWVzc2FnZSIsImRhdGEiLCJpbmRleCIsInVzZXIiLCIkIiwiYXBwZW5kIiwidGV4dCIsImdldEFuZERpc3BsYXlVc2VyTWVzc2FnZXMiLCJhcHAiLCJpbml0IiwiaXNXb3JraW5nIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImpRdWVyeSIsIm9uIiwiaWQiLCJwdWJsaXNoZWRBdCIsImJveCIsImNhbGN1bGF0ZURpbWVuc2lvbnMiLCJ3IiwiaW5uZXJXaWR0aCIsImgiLCJpbm5lckhlaWdodCIsImh0bWwiLCJzaXplciIsInRvZ2dsZUJveCIsImNsaWNrIiwidGhpcyIsInRvZ2dsZUNsYXNzIl0sIm1hcHBpbmdzIjoiQUFBQSxhQzhCQSxTQUFBQSxxQkFBQUMsR0FHQUMsV0FBQSxXQUNBRCxFQUFBRSxzQkFDQSxHQUtBLFNBQUFDLGVBQUFDLEdBQ0EsSUFBQSxJQUFBQyxLQUFBRCxFQUFBRSxLQUNBQyxFQUFBLFFBQUFDLE9BQUEsTUFBQUosRUFBQUUsS0FBQUQsR0FBQUksS0FBQSxRQU1BLFNBQUFDLDRCQUNBWCxxQkFBQUksaUJEL0NBLFNBQUFJLEdBRUEsSUFBQUksR0FFQUMsS0FBQSxXQUNBRCxFQUFBRSxhQUdBQSxVQUFBLFdBQ0FDLFFBQUFDLElBQUEsZ0VBS0FSLEVBR0FTLE9BQUFDLFFBSEFELFFBQUFFLEdBQUEsT0FBQSxXQUNBUCxFQUFBQyxTQWZBLEdDRUEsSUFBQVYscUJBQ0FJLE9BQ0FhLEdBQUEsVUFDQVYsS0FBQSx5Q0FDQVcsWUFBQSxnQkFFQUQsR0FBQSxVQUNBVixLQUFBLDhCQUNBVyxZQUFBLGdCQUVBRCxHQUFBLFNBQ0FWLEtBQUEsMERBQ0FXLFlBQUEsZ0JBRUFELEdBQUEsVUFDQVYsS0FBQSxzQ0FDQVcsWUFBQSxpQkFpQ0FiLEVBQUEsV0FDQUcsOEJDcERBLFNBQUFILEdBRUEsSUFBQUksR0FDQVUsSUFBQSxXQUNBZCxFQUFBLFFBQUFDLE9BQUEsaUlBRUFjLG9CQUFBLFdBQ0EsSUFBQUMsRUFBQVAsT0FBQVEsV0FDQUMsRUFBQVQsT0FBQVUsWUFDQW5CLEVBQUEsWUFBQW9CLEtBQUFKLEdBQ0FoQixFQUFBLGFBQUFvQixLQUFBRixJQUVBYixLQUFBLFdBQ0FELEVBQUFVLE1BQ0FWLEVBQUFpQixTQUVBQSxNQUFBLFdBQ0FqQixFQUFBVyxzQkFDQVgsRUFBQWtCLGFBRUFBLFVBQUEsV0FDQXRCLEVBQUEsYUFBQXVCLE1BQUEsV0FDQXZCLEVBQUF3QixNQUFBQyxZQUFBLGdCQUtBekIsRUFBQVMsUUFBQUUsR0FBQSxPQUFBLFdBQ0FQLEVBQUFDLFNBR0FMLEVBQUFTLFFBQUFFLEdBQUEsU0FBQSxXQUNBUCxFQUFBaUIsVUFoQ0EsQ0FrQ0FaLE9BQUFDIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoJCkge1xuXG4gIHZhciBhcHAgPSB7XG5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgYXBwLmlzV29ya2luZygpO1xuICAgIH0sXG5cbiAgICBpc1dvcmtpbmc6IGZ1bmN0aW9uIGlzV29ya2luZygpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdUaGUgSlMgZmlsZSBcXCdtYWluLmpzXFwnIGlzIHByb3Blcmx5IGxpbmtlZCB0byBcXCdpbmRleC5odG1sXFwnLicpO1xuICAgIH1cblxuICB9O1xuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBhcHAuaW5pdCgpO1xuICB9KTtcbn0pKHdpbmRvdy5qUXVlcnkpOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyB0aGlzIGlzIG1vY2sgZGF0YSwgYnV0IHdoZW4gd2UgY3JlYXRlIG91ciBBUElcbi8vIHdlJ2xsIGhhdmUgaXQgcmV0dXJuIGRhdGEgdGhhdCBsb29rcyBsaWtlIHRoaXNcbnZhciBNT0NLX1NUQVRVU19VUERBVEVTID0ge1xuICAgIFwidXNlclwiOiBbe1xuICAgICAgICBcImlkXCI6IFwiMTExMTExMVwiLFxuICAgICAgICBcInRleHRcIjogXCJDYW4ndCBiZWxpZXZlIGhvdyBtdWNoIGZ1biBJJ20gaGF2aW5nLlwiLFxuICAgICAgICBcInB1Ymxpc2hlZEF0XCI6IDE0NzAwMTY5NzY2MDlcbiAgICB9LCB7XG4gICAgICAgIFwiaWRcIjogXCIyMjIyMjIyXCIsXG4gICAgICAgIFwidGV4dFwiOiBcIkhhdmUgRk9NTz8gV2VsbCB5b3UgU0hPVUxEIVwiLFxuICAgICAgICBcInB1Ymxpc2hlZEF0XCI6IDE0NzAwMTI5NzY2MDlcbiAgICB9LCB7XG4gICAgICAgIFwiaWRcIjogXCIzMzMzMzNcIixcbiAgICAgICAgXCJ0ZXh0XCI6IFwiVGhleSdyZSBnaXZpbmcgb3V0IGltbW9ydGFsaXR5IGFuZCBmcmVlICQkJCB3aGVyZSBJIGFtLlwiLFxuICAgICAgICBcInB1Ymxpc2hlZEF0XCI6IDE0NzAwMTE5NzY2MDlcbiAgICB9LCB7XG4gICAgICAgIFwiaWRcIjogXCI0NDQ0NDQ0XCIsXG4gICAgICAgIFwidGV4dFwiOiBcImh1bWJsZSBicmFnIGh1bWJsZSBicmFnIGh1bWJsZSBicmFnXCIsXG4gICAgICAgIFwicHVibGlzaGVkQXRcIjogMTQ3MDAwOTk3NjYwOVxuICAgIH1dXG59O1xuXG4vLyB0aGlzIGZ1bmN0aW9uJ3MgbmFtZSBhbmQgYXJndW1lbnQgY2FuIHN0YXkgdGhlXG4vLyBzYW1lIGFmdGVyIHdlIGhhdmUgYSBsaXZlIEFQSSwgYnV0IGl0cyBpbnRlcm5hbFxuLy8gaW1wbGVtZW50YXRpb24gd2lsbCBjaGFuZ2UuIEluc3RlYWQgb2YgdXNpbmcgYVxuLy8gdGltZW91dCBmdW5jdGlvbiB0aGF0IHJldHVybnMgbW9jayBkYXRhLCBpdCB3aWxsXG4vLyB1c2UgalF1ZXJ5J3MgQUpBWCBmdW5jdGlvbmFsaXR5IHRvIG1ha2UgYSBjYWxsXG4vLyB0byB0aGUgc2VydmVyIGFuZCB0aGVuIHJ1biB0aGUgY2FsbGJhY2tGblxuZnVuY3Rpb24gZ2V0UmVjZW50VXNlck1lc3NhZ2UoY2FsbGJhY2tGbikge1xuICAgIC8vIHdlIHVzZSBhIGBzZXRUaW1lb3V0YCB0byBtYWtlIHRoaXMgYXN5bmNocm9ub3VzXG4gICAgLy8gYXMgaXQgd291bGQgYmUgd2l0aCBhIHJlYWwgQUpBWCBjYWxsLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFja0ZuKE1PQ0tfU1RBVFVTX1VQREFURVMpO1xuICAgIH0sIDEpO1xufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIHN0YXlzIHRoZSBzYW1lIHdoZW4gd2UgY29ubmVjdFxuLy8gdG8gcmVhbCBBUEkgbGF0ZXJcbmZ1bmN0aW9uIGRpc3BsYXlNZXNzYWdlKGRhdGEpIHtcbiAgICBmb3IgKHZhciBpbmRleCBpbiBkYXRhLnVzZXIpIHtcbiAgICAgICAgJCgnYm9keScpLmFwcGVuZCgnPHA+JyArIGRhdGEudXNlcltpbmRleF0udGV4dCArICc8L3A+Jyk7XG4gICAgfVxufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIGNhbiBzdGF5IHRoZSBzYW1lIGV2ZW4gd2hlbiB3ZVxuLy8gYXJlIGNvbm5lY3RpbmcgdG8gcmVhbCBBUElcbmZ1bmN0aW9uIGdldEFuZERpc3BsYXlVc2VyTWVzc2FnZXMoKSB7XG4gICAgZ2V0UmVjZW50VXNlck1lc3NhZ2UoZGlzcGxheU1lc3NhZ2UpO1xufVxuXG4vLyAgb24gcGFnZSBsb2FkIGRvIHRoaXNcbiQoZnVuY3Rpb24gKCkge1xuICAgIGdldEFuZERpc3BsYXlVc2VyTWVzc2FnZXMoKTtcbn0pOyIsIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgYXBwID0ge1xuICAgIGJveDogZnVuY3Rpb24gYm94KCkge1xuICAgICAgJCgnYm9keScpLmFwcGVuZChcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmlld3BvcnRcXFwiPlxcbiAgICAgICAgICA8c3BhbiBpZD1cXFwidC13aWR0aFxcXCI+PC9zcGFuPiB4IDxzcGFuIGlkPVxcXCJ0LWhlaWdodFxcXCI+PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgXCIpO1xuICAgIH0sXG4gICAgY2FsY3VsYXRlRGltZW5zaW9uczogZnVuY3Rpb24gY2FsY3VsYXRlRGltZW5zaW9ucygpIHtcbiAgICAgIHZhciB3ID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICQoXCIjdC13aWR0aFwiKS5odG1sKHcpO1xuICAgICAgJChcIiN0LWhlaWdodFwiKS5odG1sKGgpO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIGFwcC5ib3goKTtcbiAgICAgIGFwcC5zaXplcigpO1xuICAgIH0sXG4gICAgc2l6ZXI6IGZ1bmN0aW9uIHNpemVyKCkge1xuICAgICAgYXBwLmNhbGN1bGF0ZURpbWVuc2lvbnMoKTtcbiAgICAgIGFwcC50b2dnbGVCb3goKTtcbiAgICB9LFxuICAgIHRvZ2dsZUJveDogZnVuY3Rpb24gdG9nZ2xlQm94KCkge1xuICAgICAgJCgnLnZpZXdwb3J0JykuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBhcHAuaW5pdCgpOyAvL2MwMjhcbiAgfSk7XG5cbiAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgYXBwLnNpemVyKCk7IC8vYzAyOFxuICB9KTtcbn0pKHdpbmRvdy5qUXVlcnkpOyJdfQ==
>>>>>>> 30b79c090a571d12277c9d8325b98db09da8eb21
