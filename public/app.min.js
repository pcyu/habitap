"use strict";!function(i){var n={box:function(){i("body").append('\n        <div class="viewport">\n          <span id="t-width"></span> x <span id="t-height"></span>\n        </div>\n      ')},calculateDimensions:function(){var n=window.innerWidth,t=window.innerHeight;i("#t-width").html(n),i("#t-height").html(t)},init:function(){n.box(),n.sizer()},sizer:function(){n.calculateDimensions(),n.toggleBox()},toggleBox:function(){i(".viewport").click(function(){i(this).toggleClass("inactive")})}};i(window).on("load",function(){n.init()}),i(window).on("resize",function(){n.sizer()})}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
