"use strict";!function(o){var e={baseUrl:"http://localhost:3008",name:"",init:function(){e.doLogin(),e.getProtected(),e.logoutHandler(),e.signUpHandler()},doLogin:function(){o(document).on("click","#t-login",function(){o("#t-modal-sign-up").removeClass("active"),o("#t-modal-login").toggleClass("active"),o("#t-burger").prop("checked",!1)}),o(document).on("submit","#login-submit",function(o){o.preventDefault(),e.loginHandler().then(e.loadEndpoint)})},getProtected:function(){o(document).on("submit","#get-protected",function(n){n.preventDefault();var t="Bearer "+localStorage.getItem("jwToken");return new Promise(function(n,a){o.ajax({headers:{accept:"application/json; odata=verbose",Authorization:t},type:"GET",url:e.baseUrl+"/protected",success:function(o){console.log(o),n()},error:function(o){console.log(o),a()}})})})},loadEndpoint:function(){var n="Bearer "+localStorage.getItem("jwToken");return new Promise(function(t,a){o.ajax({headers:{accept:"application/json; odata=verbose",Authorization:n},type:"GET",url:e.baseUrl+"/protected",success:function(o){e.loadPage("protected"),t()},error:function(o){console.log(o),a()}})})},loginHandler:function(){var n={username:o("#login-username").val(),password:o("#login-password").val()};return new Promise(function(t,a){o.ajax({contentType:"application/json; charset=utf-8",data:JSON.stringify(n),headers:{accept:"application/json; odata=verbose"},type:"POST",url:"http://localhost:3008/auth/login",success:function(n){e.name=n.profile.firstName+" "+n.profile.lastName,o("#login-username").val(""),o("#login-password").val(""),localStorage.setItem("jwToken",n.profile.token),console.log("Welcome "+e.name+"! You are now logged in."),t()},error:function(o){console.log(o),a()}})})},logoutHandler:function(){o(document).on("submit","#do-logout",function(o){o.preventDefault(),localStorage.removeItem("jwToken"),console.log("You are now logged out."),e.name="",location.reload(!0)})},signUpHandler:function(){o(document).on("click","#t-sign-up",function(){o("#t-modal-login").removeClass("active"),o("#t-modal-sign-up").toggleClass("active"),o("#t-burger").prop("checked",!1)}),o(document).on("submit","#sign-up-submit",function(n){n.preventDefault();var t={firstName:o("#firstName").val(),lastName:o("#lastName").val(),password:o("#password").val(),username:o("#username").val()};return new Promise(function(n,a){o.ajax({contentType:"application/json; charset=utf-8",data:JSON.stringify(t),headers:{accept:"application/json; odata=verbose"},type:"POST",url:e.baseUrl+"/users/register",success:function(e){console.log("Thank you "+t.firstName+" "+t.lastName+"! Your account has been created."),o("#firstName").val(""),o("#lastName").val(""),o("#username").val(""),o("#password").val(""),o("#t-modal-login").addClass("active"),o("#t-modal-sign-up").removeClass("active"),n()},error:function(o){console.log(o),a()}})})})},loadPage:function(e){var n=o("#root"),t="src/templates/"+e+".html";o.get(t,function(e){o(n).html(e)})}};o(window).on("load",function(){e.init(),e.loadPage("landing")}),o(window).on("resize",function(){e.sizer()})}(window.jQuery),function(o){var e={box:function(){o("body").append('\n        <div class="viewport">\n          <span id="t-width"></span> x <span id="t-height"></span>\n        </div>\n      ')},calculateDimensions:function(){var e=window.innerWidth,n=window.innerHeight;o("#t-width").html(e),o("#t-height").html(n)},init:function(){e.box(),e.sizer()},sizer:function(){e.calculateDimensions(),e.toggleBox()},toggleBox:function(){o(".viewport").click(function(){o(this).toggleClass("inactive")})}};o(window).on("load",function(){e.init()}),o(window).on("resize",function(){e.sizer()})}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
